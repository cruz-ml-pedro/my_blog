---
title: "Cotação do ouro - Parte 4 "
subtitle: "Neural Network Time Series Forecasting"
author: "Pedro Lima"
date: "2023-08-05"
categories: [Série-Temporal,R,Machine Learning, Deep Learning]
toc: true
toc-depth: 3
draft: true
---

```{r, echo=FALSE}
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, warning = FALSE,
                      message = FALSE, echo = TRUE, dpi = 180,
                      fig.width = 8, fig.height = 5)

pacman::p_load(tidyverse,tidyquant, tidymodels,timetk, modeltime, xgboost, modeltime.resample)

# This toggles plots from plotly (interactive) to ggplot (static)
interactive <- FALSE
```

```{r, echo=FALSE}
# Obter dados da ação de ouro (código GLD)
gold_data <- tq_get("GLD")

```

```{r, echo=FALSE}
gold_mean <-
  gold_data %>% 
  group_by(mes = format(date, "%Y-%m")) %>%
  summarize(media = mean(close, na.rm = TRUE)) %>% 
   mutate(
    mes=as_date(mes, format="%Y-%m")
    )
```

```{r, echo=FALSE}
 splits <-
   gold_mean %>% 
   time_series_split(
     assess = "1 year",
     cumulative = TRUE
     )

cv <- 
  gold_mean %>% 
  time_series_cv(
    assess      = 12 * 0.5,
    initial     = 12 * 4,
    skip        = 12 * 1,
    slice_limit = 6,
    culmulatime = FALSE
  )

```

```{r, echo=FALSE, results='hide'}
splits %>% 
  tk_time_series_cv_plan() %>% 
  plot_time_series_cv_plan(mes,media, .facet_ncol = 1, .interactive = FALSE)
```

```{r, echo=FALSE, results='hide'}
cv %>% 
  tk_time_series_cv_plan() %>% 
  plot_time_series_cv_plan(mes,media, .facet_ncol = 2, .interactive = FALSE)
```

## Modelos

```{r}
nnet_model_auto <- 
  nnetar_reg() %>%
    set_engine("nnetar") %>%
    fit(media ~ mes, data = training(splits))
```

```{r}
nnet_model_adj <- 
  nnetar_reg(
    seasonal_period = 12,
    non_seasonal_ar = 1,
    seasonal_ar = 1,
    hidden_units = 10,
    num_networks = 20,
    epochs = 500,
    penalty = 0
    ) %>%
    set_engine("nnetar") %>%
    fit(media ~ mes, data = training(splits))
```

```{r}
nnet_model_nreg <- 
  nnetar_reg() %>%
    set_engine("nnetar") %>%
    fit(media ~ mes + factor(month(mes, label = TRUE),ordered = FALSE), 
                            data = training(splits))
```

```{r}
nnet_model_mreg <- 
  nnetar_reg(
    seasonal_period = 12,
    non_seasonal_ar = 1,
    seasonal_ar = 1,
    hidden_units = 10,
    num_networks = 20,
    epochs = 500,
    penalty = 0) %>%
    set_engine("nnetar") %>%
    fit(media ~ mes+ factor(month(mes, label = TRUE),ordered = FALSE), 
                            data = training(splits))
```

## Comparando os modelos

```{r}
model_table <- 
modeltime_table(
  nnet_model_auto,
  nnet_model_adj,
  nnet_model_mreg,
  nnet_model_nreg
  
  )
```

## Calibrando

```{r}
calib_table <- 
  model_table %>% 
  modeltime_calibrate(testing(splits))
```

## Residual

```{r}
# calib_table %>% 
#   modeltime_residuals() %>% 
#   plot_modeltime_residuals(
#     .type = "seasonality",
#     .interactive = FALSE
#     )
```

## Accuracy

```{r}
calib_table %>% 
  modeltime_accuracy() 
```

## Test set visualization

```{r}
calib_table %>% 
  modeltime_forecast(
    new_data = testing(splits),
    actual_data = gold_mean
  ) %>% 
  plot_modeltime_forecast()
```

## Validação Cruzada

```{r}
resamples_fitted <- model_table %>%
    modeltime_fit_resamples(
        resamples = cv,
        control   = control_resamples(verbose = FALSE)
    )

resamples_fitted
```

```{r}
resamples_fitted %>%
    plot_modeltime_resamples(
      .point_size  = 3, 
      .point_alpha = 0.8,
      .interactive = FALSE
    )
```

```{r}
resamples_fitted %>%
    modeltime_resample_accuracy(summary_fns = mean) %>%
    table_modeltime_accuracy(.interactive = FALSE)
```

## Forecast future

```{r}
future_forecast_tbl <- 
  calib_table %>% 
  modeltime_refit(gold_mean) %>% 
  modeltime_forecast(
    h  = "1 year",
    actual_data = gold_mean
  )
```

```{r}
future_forecast_tbl %>% 
  plot_modeltime_forecast()
```

------------------------------------------------------------------------
