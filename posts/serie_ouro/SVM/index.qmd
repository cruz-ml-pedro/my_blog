---
title: "Cotação do ouro - Parte 4 "
subtitle: "Suport Vector Machine"
author: "Pedro Lima"
date: "2023-08-05"
categories: [Série-Temporal,R,Machine Learning]
toc: true
toc-depth: 3
draft: true
---

```{r, echo=FALSE}
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, warning = FALSE,
                      message = FALSE, echo = TRUE, dpi = 180,
                      fig.width = 8, fig.height = 5)

pacman::p_load(tidyverse,tidyquant, tidymodels,timetk, modeltime, xgboost, modeltime.resample)

# This toggles plots from plotly (interactive) to ggplot (static)
interactive <- FALSE
```

```{r, echo=FALSE}
# Obter dados da ação de ouro (código GLD)
gold_data <- tq_get("GLD")

```

```{r, echo=FALSE}
gold_mean <-
  gold_data %>% 
  group_by(mes = format(date, "%Y-%m")) %>%
  summarize(media = mean(close, na.rm = TRUE)) %>% 
   mutate(
    mes=as_date(mes, format="%Y-%m")
    )
```

```{r, echo=FALSE}
 splits <-
   gold_mean %>% 
   time_series_split(
     assess = "1 year",
     cumulative = TRUE
     )

```

```{r, echo=FALSE, results='hide'}
splits %>% 
  tk_time_series_cv_plan() %>% 
  plot_time_series_cv_plan(mes,media, .facet_ncol = 1, .interactive = FALSE)
```

## Tuning

Identificando o número de cores disponíveis

```{r}
parallel::detectCores(logical = TRUE)
```

```{r}
parallel_start(4, .method = "parallel")
```

## Recipe

```{r}
recipe_spec_1 <- recipe(media ~ ., data = training(splits)) %>%
  step_timeseries_signature(mes) %>%
  step_rm(mes) %>%
  step_nzv(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors())
 

recipe_spec_1 %>%  prep() %>% bake(new_data=NULL) 
```

## Model Specifications

```{r}

model_tbl <- tibble(
  cost = c(1, 1.5, 2, 2.5, 3, 3.5),
  #rbf_sigma = c(0.010, 0.020, 0.030, 0.040, 0.05, 0.06)
) %>%
  create_model_grid(
    f_model_spec = svm_rbf,
    engine_name  = "kernlab",
    mode         = "regression"
  )

model_tbl
```

##Extracting the model list

```{r}
model_list <- model_tbl$.models

model_list
```

## Workflowsets

```{r}
model_wfset <- workflow_set(
  preproc = list(
    recipe_spec_1
  ),
  models = model_list, 
  cross = TRUE
)

model_wfset
```

## Parallel Training (Fitting)

```{r}
control_fit_workflowset(
  verbose   = TRUE,
  allow_par = TRUE
)
```

## Fitting Using Parallel Backend

```{r}
model_parallel_tbl <- model_wfset %>%
  modeltime_fit_workflowset(
    data    = training(splits),
    control = control_fit_workflowset(
      verbose   = TRUE,
      allow_par = TRUE
    )
  )
```

```{r}
model_parallel_tbl
```

## Comparison to Sequential Backend

```{r}
model_sequential_tbl <- model_wfset %>%
  modeltime_fit_workflowset(
    data    = training(splits),
    control = control_fit_workflowset(
      verbose   = TRUE,
      allow_par = FALSE
    )
  )
```

```{r}
model_parallel_tbl %>%
  modeltime_calibrate(testing(splits)) %>%
  modeltime_accuracy() #%>%
 # table_modeltime_accuracy(.interactive = FALSE)
```

## Forecast Assessment

```{r}
model_parallel_tbl %>%
  modeltime_calibrate(testing(splits)) %>% 
  modeltime_forecast(
    new_data    = testing(splits),
    actual_data = gold_mean,
    keep_data   = TRUE
  ) %>%
  plot_modeltime_forecast()
```

fazer o tuning dos dois parâmetros separados e contruir um modelo com eles para ver como fica

## Forecast future

```{r}
future_forecast_tbl <- 
  model_parallel_tbl %>%
  modeltime_calibrate(testing(splits)) %>% 
  modeltime_refit(gold_mean) %>% 
  modeltime_forecast(
    h  = "1 year",
    actual_data = gold_mean
  )
```

```{r}
future_forecast_tbl %>% 
  plot_modeltime_forecast()
```

```{r}
parallel_stop()
```
