---
title: "Modelagem Elasticidade Preço-Demanda"
subtitle: "Modelos Aditivos Generalizados (GAMs)"
author: "Pedro Lima"
date: "2023-12-21"
categories: [Modelos Estatísticos, Python]
toc: true
toc-depth: 3
format:
  html:
    code-tools: false
    code-fold: false
jupyter: python3
draft: false
---

```{=html}
<style>
    .justificado {
        text-align: justify;
    }
</style>
```

# Introdução

::: justificado
Em um mercado dinâmico, compreender a relação entre o preço de um produto e sua demanda é essencial para estratégias eficazes de precificação. Neste artigo, embarcaremos em uma exploração da aplicação de Modelos Aditivos Generalizados (GAMs) para modelar a variação da demanda em relação ao preço.

Dado meu conhecimento inicial limitado sobre o tema, optarei por começar minha incursão por meio de um exemplo simples. Utilizarei o conceito de quantil de expectativa para criar modelos que representem diferentes cenários da relação entre demanda e preço. Essa abordagem inicial permitirá não apenas uma compreensão mais acessível do método, mas também a construção de modelos que capturam tanto o comportamento médio quanto cenários extremos. 
:::

# Elasticidade-Preço da Demanda

::: justificado
Antes de adentrarmos nos modelos, é interessante compreender o conceito de elasticidade-preço da demanda, mesmo não sendo o objetivo deste post calcular o índice em si, mas sim criar a intuição de como utilizar GAMs como estratégia de precificação. Esse indicador mensura a sensibilidade da quantidade demandada de um bem diante das variações em seu preço. Trata-se de uma ferramenta valiosa para empresas, governos e economistas, pois oferece discernimento sobre como as alterações nos preços impactam o comportamento dos consumidores e, por conseguinte, a receita total. Uma compreensão da elasticidade também desempenha papel crucial na formulação de políticas públicas.

A fórmula básica para calcular a elasticidade preço da demanda (EPD) é:

$$
\text{EPD} = \frac{\%\text{Variação na Quantidade Demandada}}{\%\text{Variação no Preço}}
$$

O resultado dessa fórmula pode ser classificado em diferentes categorias:

1.  Elasticidade Perfeitamente Inelástica $\text{EPD} = 0$

    -   A quantidade demandada permanece constante, independentemente das mudanças no preço.

2.  Inelástica $(0 < \text{EPD} < 1)$:

    -   A quantidade demandada responde menos do que proporcionalmente às mudanças no preço. Isso significa que, se o preço aumentar, a receita total (preço multiplicado pela quantidade) também aumentará.

3.  Unitária $(\text{EPD} = 1)$:

    -   A quantidade demandada muda na mesma proporção que o preço, resultando em receita total constante.

4.  Elástica ($\text{EPD} > 1)$:

    -   A quantidade demandada responde mais do que proporcionalmente às mudanças no preço. Se o preço aumentar, a receita total diminuirá.

5.  Elasticidade Perfeitamente Elástica $(\text{EPD} = \infty)$:

    -   A quantidade demandada é extremamente sensível às mudanças no preço. Pequenas alterações no preço levam a mudanças extremas na quantidade demandada.
:::

# Modelos Aditivos Generalizados (GAMs)

::: justificado
Os GAMs, extensão dos modelos lineares generalizados (GLMs), são uma ferramenta poderosa na modelagem estatística, permitindo a captura de relações não lineares entre variáveis.

Em um GAM, a função preditiva é expressa como a soma de funções suaves de preditores, e a estrutura de suavização é estimada a partir dos dados. Suponhamos que estejamos interessados em prever uma variável de resposta $Y$ usando preditores $X_1, X_2, \ldots, X_p$. A formulação básica de um GAM é dada por:

$$g(\mu) = \beta_0 + f_1(X_1) + f_2(X_2) + \ldots + f_p(X_p)$$

onde:

-   $g(.)$ é a função de ligação (pode ser logarítmica para modelos de regressão logística, identidade para modelos de regressão linear, etc.).

-   $\mu$ é a média da distribuição condicional da resposta.

-   $\beta_0$ é o intercepto.

-   $f_1(X_1) + f_2(X_2) + \ldots + f_p(X_p)$ são funções suaves dos preditores.

As funções suaves $f_i(X_i)$ são geralmente representadas usando splines ou outras formas de suavização.

O modelo é ajustado aos dados por meio de uma abordagem de otimização para estimar os coeficientes $\beta_0$ e as funções suaves $f_i(.)$ que minimizam uma função de perda.
:::

## Quantil de Expectativa (Expectile)

::: justificado
"Expectile" é uma abreviação de "expectation quantile" (quantil de expectativa). Em estatísticas e modelagem estatística, um expectil representa um valor condicional associado a um determinado quantil da distribuição de uma variável aleatória. Em outras palavras, é uma medida de tendência central que foca em um quantil específico da distribuição, proporcionando uma visão mais detalhada das características dessa distribuição em comparação com a média condicional. O uso de expectis é particularmente útil quando se deseja entender o comportamento de uma variável em diferentes percentis da sua distribuição.
:::

# Carregando os pacotes necessários
::: justificado
O código abaixo importa os pacotes necessários para a criação dos modelos. Se por acaso você não tiver algum desses pacotes instalados, basta utilizar `!pip install 'nome do pacote'`. 

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pygam import s, ExpectileGAM

import warnings
warnings.filterwarnings('ignore')
```

Se você está começando a utilizar o Python, assim como eu, aqui está uma breve descrição sobre os pacotes utilizados:

-  Pandas:

    - O Pandas é uma biblioteca essencial para manipulação e análise de dados. Com suas estruturas de dados poderosas, como o DataFrame, facilita a organização e a exploração eficiente de conjuntos de dados.
    
-  NumPy:

    - O NumPy é uma biblioteca fundamental para computação numérica em Python. Sua principal contribuição é a introdução de arrays multidimensionais, proporcionando suporte robusto para operações matemáticas e facilitando cálculos complexos.

-  Matplotlib.pyplot:

    - O Matplotlib.pyplot é uma ferramenta poderosa para visualização de dados. Essa biblioteca permite a criação de gráficos e plots, possibilitando a apresentação clara e compreensível de resultados de análises.

-  PyGAM:

    - O PyGAM é uma biblioteca especializada em Modelos Aditivos Generalizados (GAMs). Destacamos as funções s e ExpectileGAM. A função s é fundamental para especificar termos suaves em modelos, enquanto ExpectileGAM é utilizada para modelar a expectativa condicional de variáveis de resposta, proporcionando flexibilidade na análise estatística.
:::

# Criando os dados

::: justificado
O código baixo está criando dados simulados para as variáveis 'price' e 'quantity' com base em distribuições aleatórias.

```{python}
#gerando os dados
np.random.seed(0)
n=100
price = np.sort(np.random.exponential(scale=100,size=n))
quantity = 1000 - 5 * price + np.random.normal(loc=0, scale=50,size=n)
quantity = quantity.clip(min=0)
```

A variável 'price' foi gerada a partir de uma distribuição exponencial, representando os preços dos produtos simulados. Enquanto isso, a variável 'quantity' foi construída como uma relação linear com 'price', mais um componente de ruído normal. Essa abordagem visa simular a relação entre preço e quantidade demandada.

O trecho de código a seguir adiciona outliers aos dados simulados

```{python}
#adicionando outliers
n_outliers = 10
outliers_prices = np.random.uniform(5,50,n_outliers)
outliers_quantity = 1100 +  np.random.normal(loc=0,scale=50,size=n_outliers)
price = np.concatenate([price, outliers_prices])
quantity = np.concatenate([quantity, outliers_quantity])
```

```{python}
#adicionando outliers
n_outliers = 10
outliers_prices = np.random.uniform(51,100,n_outliers)
outliers_quantity = 900 +  np.random.normal(loc=0,scale=50,size=n_outliers)
price = np.concatenate([price, outliers_prices])
quantity = np.concatenate([quantity, outliers_quantity])
```

Criando um DataFrame a partir das variáveis 'price' e 'quantity'.

```{python}
df = pd.DataFrame({
  'Price' : price,
  'Quantity': quantity
})
```
:::

# Criando os Modelos
::: justificado

## Preparando os dados

Removendo outliers.

```{python}
df = df[df['Price'] >= 5]
```

Criando duas variáveis, x e y, a partir de um DataFrame df. 

```{python}
x = df[['Price']]
y = df['Quantity']
```

para a criação de x esta sendo aplicadoo o uso de colchetes duplos (\[\['Price'\]\]) que cria um DataFrame em vez de uma Série. Portanto, x será um DataFrame com uma única coluna 'Price'. Já y está sendo atribuído com a coluna 'Quantity' do DataFrame original df, resultando em uma Série.
:::

## Quantil GAMs

::: justificado
Nesse trecho de código, vamos criar uma lista chamada quantiles com os valores de \[0.025, 0.5, 0.975\], nossos quantis de interesse. Também está sendo criado um dicionário vazio chamado `gam_results`. Os dicionários em Python são estruturas de dados que mapeiam chaves a valores. Eles são úteis para armazenar e organizar dados.

```{python}
quantiles = [0.025, 0.5, 0.975]
gam_results = {}
```

Neste trecho de código, vamos iterar sobre os valores da lista quantiles e, para cada valor q na lista, está criando e ajustando um modelo GAM através da função `ExpectileGAM`, específica para estimar expectativas condicionais de quantis (percentis) de uma variável de resposta. Em outras palavras, ela é projetada para modelar a relação entre variáveis preditoras e a expectativa condicional de determinados quantis da variável resposta, em vez de estimar a média condicional.

O `s(0)` indica uma spline univariada aplicada à variável.

```{python}
for q in quantiles:
  gam = ExpectileGAM(s(0),expectile=q)
  gam.fit(x,y)
  gam_results[q] = gam
  
#gam_results
```

Ao final desse loop, `gam_results` conterá modelos GAM ajustados para cada quantil especificado na lista quantiles.
:::

# Visualizando
::: justificado
Vamos visualizar os modelos criados.

```{python}

plt.figure(figsize=(8,6))
plt.scatter(df['Price'], df['Quantity'], alpha=0.5, label='Dados')



xx = np.linspace(df['Price'].min(), df['Price'].max(), 1000).reshape(-1,1)

for q, gam in gam_results.items():
  plt.plot(xx, gam.predict(xx), label=f'{int(q*100)}º Quantis GAMs')
  

plt.xlabel('Preço')
plt.ylabel('Demanda')
plt.title('Quantis GAMs - Preço vs Demanda (Outliers Removidos)')
plt.legend()
plt.grid(True, which='both',
linestyle='--', linewidth=0.5)
plt.tight_layout()
plt.show()
```

Este trecho de código emprega a biblioteca Matplotlib para gerar um gráfico de dispersão dos dados e, posteriormente, desenha curvas de quantis para os modelos GAM ajustados. O resultado final é um gráfico que exibe os dados originais acompanhados por um conjunto de curvas suaves que representam os quantis GAM ajustados para a relação entre preço e demanda. 
:::

# Conclusão
::: justificado
Ao longo desta análise, empreguei a função ExpectileGAM para criar modelos que vão além da simples estimativa da média condicional. A utilização de diferentes valores de 'expectile'  permitiu a construção de cenários extremos, representando tanto o pior quanto o melhor caso para a relação entre preço e demanda. Esta abordagem pode proporciona insights valiosos sobre o comportamento da variação da demanda em relação ao preço, auxiliando inclusive na identificação de possíveis outliers.

A modelagem com funções de base splines permitiu a captura de padrões não-lineares, tornando os modelos mais flexíveis e adaptáveis à complexidade subjacente dos dados. Os gráficos resultantes, com curvas suaves representando diferentes quantis, oferecem uma visualização clara dos cenários possíveis.

Ao considerar os piores e melhores cenários de preços, abre-se uma janela estratégica valiosa para a formulação de estratégias de precificação mais robustas. Compreender como a demanda pode variar em extremos é crucial para a tomada de decisões informadas, capacitando empresas a ajustar suas estratégias de acordo com diferentes contextos de mercado.

Este estudo, embora um exemplo simples, ilustra o potêncial da modelagem com GAMs na análise de elasticidade do preço. Em futuras postagens sobre esse tema, pretendo aprofundar a análise utilizando dados reais.
:::

# Referências
::: justificado
[Price Elasticity and Optimization in Python (feat. pyGAM)](https://www.youtube.com/watch?v=tRku0RgRQtc&t=881s)

[Welcome to pyGAM’s documentation!](https://pygam.readthedocs.io/en/latest/index.html)

[ExpectileGAM](https://pygam.readthedocs.io/en/latest/api/expectilegam.html)
:::